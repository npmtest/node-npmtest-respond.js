{"/home/travis/build/npmtest/node-npmtest-respond.js/test.js":"/* istanbul instrument in package npmtest_respond_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-respond.js/lib.npmtest_respond.js.js":"/* istanbul instrument in package npmtest_respond_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_respond_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_respond_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-respond.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-respond.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_respond_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_respond_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_respond_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_respond_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_respond_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_respond_js.__dirname + '/lib.npmtest_respond_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-respond.js/node_modules/respond.js/Gruntfile.js":"module.exports = function(grunt) {\r\n\t\"use strict\";\r\n\r\n\t// Project configuration.\r\n\tgrunt.initConfig({\r\n\t\tpkg: grunt.file.readJSON('package.json'),\r\n\t\tbanner:\r\n\t\t\t\t\t\t'/*! Respond.js v<%= pkg.version %>: <%= pkg.description %>\\n' +\r\n\t\t\t\t\t\t' * Copyright <%= grunt.template.today(\"yyyy\") %> <%= pkg.author.name %>\\n' +\r\n\t\t\t\t\t\t' * Licensed under <%= _.pluck(pkg.licenses, \"type\").join(\", \") %>\\n' + \r\n\t\t\t\t\t\t' * <%= pkg.homepageShortened %>' +\r\n\t\t\t\t\t\t' */\\n\\n',\r\n\t\tuglify: {\r\n\t\t\tnonMinMatchMedia: {\r\n\t\t\t\toptions: {\r\n\t\t\t\t\tbanner: '<%= banner %>',\r\n\t\t\t\t\tmangle: false,\r\n\t\t\t\t\tcompress: false,\r\n\t\t\t\t\tpreserveComments: 'some',\r\n\t\t\t\t\tbeautify: {\r\n\t\t\t\t\t\tbeautify: true,\r\n\t\t\t\t\t\tindent_level: 2\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tfiles: {\r\n\t\t\t\t\t'dest/respond.src.js': ['src/matchmedia.polyfill.js', 'src/respond.js']\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tminMatchMedia: {\r\n\t\t\t\toptions: {\r\n\t\t\t\t\tbanner: '<%= banner %>'\r\n\t\t\t\t},\r\n\t\t\t\tfiles: {\r\n\t\t\t\t\t'dest/respond.min.js': ['src/matchmedia.polyfill.js', 'src/respond.js']\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tnonMinMatchMediaListener: {\r\n\t\t\t\toptions: {\r\n\t\t\t\t\tbanner: '<%= banner %>',\r\n\t\t\t\t\tmangle: false,\r\n\t\t\t\t\tcompress: false,\r\n\t\t\t\t\tpreserveComments: 'some',\r\n\t\t\t\t\tbeautify: {\r\n\t\t\t\t\t\tbeautify: true,\r\n\t\t\t\t\t\tindent_level: 2\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tfiles: {\r\n\t\t\t\t\t'dest/respond.matchmedia.addListener.src.js': ['src/matchmedia.polyfill.js', 'src/matchmedia.addListener.js', 'src/respond.js']\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tminMatchMediaListener: {\r\n\t\t\t\toptions: {\r\n\t\t\t\t\tbanner: '<%= banner %>'\r\n\t\t\t\t},\r\n\t\t\t\tfiles: {\r\n\t\t\t\t\t'dest/respond.matchmedia.addListener.min.js': ['src/matchmedia.polyfill.js', 'src/matchmedia.addListener.js', 'src/respond.js']\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tjshint: {\r\n\t\t\tfiles: ['src/respond.js', 'src/matchmedia.polyfill.js'],\r\n\t\t\toptions: {\r\n\t\t\t\tcurly: true,\r\n\t\t\t\teqeqeq: true,\r\n\t\t\t\timmed: true,\r\n\t\t\t\tlatedef: false,\r\n\t\t\t\tnewcap: true,\r\n\t\t\t\tnoarg: true,\r\n\t\t\t\tsub: true,\r\n\t\t\t\tundef: true,\r\n\t\t\t\tboss: true,\r\n\t\t\t\teqnull: true,\r\n\t\t\t\tsmarttabs: true,\r\n\t\t\t\tnode: true,\r\n\t\t\t\tes5: true,\r\n\t\t\t\tstrict: false\r\n\t\t\t},\r\n\t\t\tglobals: {\r\n\t\t\t\tImage: true,\r\n\t\t\t\twindow: true\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tgrunt.loadNpmTasks( 'grunt-contrib-jshint' );\r\n\tgrunt.loadNpmTasks( 'grunt-contrib-uglify' );\r\n\r\n\t// Default task.\r\n\tgrunt.registerTask('default', ['jshint', 'uglify']);\r\n\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-respond.js/node_modules/respond.js/cross-domain/respond.proxy.js":"/*! Respond.js: min/max-width media query polyfill. Remote proxy (c) Scott Jehl. MIT/GPLv2 Lic. j.mp/respondjs  */\r\n(function(win, doc, undefined){\r\n\tvar docElem\t\t\t= doc.documentElement,\r\n\t\tproxyURL\t\t= doc.getElementById(\"respond-proxy\").href,\r\n\t\tredirectURL\t\t= (doc.getElementById(\"respond-redirect\") || location).href,\r\n\t\tbaseElem\t\t= doc.getElementsByTagName(\"base\")[0],\r\n\t\turls\t\t\t= [],\r\n\t\trefNode;\r\n\r\n\tfunction encode(url){\r\n\t\treturn win.encodeURIComponent(url);\r\n\t}\r\n\r\n\t function fakejax( url, callback ){\r\n\r\n\t\tvar iframe,\r\n\t\t\tAXO;\r\n\t\t\r\n\t\t// All hail Google http://j.mp/iKMI19\r\n\t\t// Behold, an iframe proxy without annoying clicky noises.\r\n\t\tif ( \"ActiveXObject\" in win ) {\r\n\t\t\tAXO = new ActiveXObject( \"htmlfile\" );\r\n\t\t\tAXO.open();\r\n\t\t\tAXO.write( '<iframe id=\"x\"></iframe>' );\r\n\t\t\tAXO.close();\r\n\t\t\tiframe = AXO.getElementById( \"x\" );\r\n\t\t} else {\r\n\t\t\tiframe = doc.createElement( \"iframe\" );\r\n\t\t\tiframe.style.cssText = \"position:absolute;top:-99em\";\r\n\t\t\tdocElem.insertBefore(iframe, docElem.firstElementChild || docElem.firstChild );\r\n\t\t}\r\n\r\n\t\tiframe.src = checkBaseURL(proxyURL) + \"?url=\" + encode(redirectURL) + \"&css=\" + encode(checkBaseURL(url));\r\n\t\t\r\n\t\tfunction checkFrameName() {\r\n\t\t\tvar cssText;\r\n\r\n\t\t\ttry {\r\n\t\t\t\tcssText = iframe.contentWindow.name;\r\n\t\t\t}\r\n\t\t\tcatch (e) { }\r\n\r\n\t\t\tif (cssText) {\r\n\t\t\t\t// We've got what we need. Stop the iframe from loading further content.\r\n\t\t\t\tiframe.src = \"about:blank\";\r\n\t\t\t\tiframe.parentNode.removeChild(iframe);\r\n\t\t\t\tiframe = null;\r\n\r\n\t\t\t\r\n\t\t\t\t// Per http://j.mp/kn9EPh, not taking any chances. Flushing the ActiveXObject\r\n\t\t\t\tif (AXO) {\r\n\t\t\t\t\tAXO = null;\r\n\r\n\t\t\t\t\tif (win.CollectGarbage) {\r\n\t\t\t\t\t\twin.CollectGarbage();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallback(cssText);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\twin.setTimeout(checkFrameName, 100);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\twin.setTimeout(checkFrameName, 500);\r\n\t}\r\n\r\n    // http://stackoverflow.com/a/472729\r\n\tfunction checkBaseURL(href) {\r\n        var el = document.createElement('div'),\r\n        escapedURL = href.split('&').join('&amp;').\r\n            split('<').join('&lt;').\r\n            split('\"').join('&quot;');\r\n\r\n        el.innerHTML = '<a href=\"' + escapedURL + '\">x</a>';\r\n        return el.firstChild.href;\r\n\t}\r\n\t\r\n\tfunction checkRedirectURL() {\r\n\t\t// IE6 & IE7 don't build out absolute urls in <link /> attributes.\r\n\t\t// So respond.proxy.gif remains relative instead of http://example.com/respond.proxy.gif.\r\n\t\t// This trickery resolves that issue.\r\n\t\tif (~ !redirectURL.indexOf(location.host)) {\r\n\r\n\t\t\tvar fakeLink = doc.createElement(\"div\");\r\n\r\n\t\t\tfakeLink.innerHTML = '<a href=\"' + redirectURL + '\"></a>';\r\n\t\t\tdocElem.insertBefore(fakeLink, docElem.firstElementChild || docElem.firstChild );\r\n\r\n\t\t\t// Grab the parsed URL from that dummy object\r\n\t\t\tredirectURL = fakeLink.firstChild.href;\r\n\r\n\t\t\t// Clean up\r\n\t\t\tfakeLink.parentNode.removeChild(fakeLink);\r\n\t\t\tfakeLink = null;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction buildUrls(){\r\n\t\tvar links = doc.getElementsByTagName( \"link\" );\r\n\t\t\r\n\t\tfor( var i = 0, linkl = links.length; i < linkl; i++ ){\r\n\t\t\t\r\n\t\t\tvar thislink\t= links[i],\r\n\t\t\t\thref\t\t= links[i].href,\r\n\t\t\t\textreg\t\t= (/^([a-zA-Z:]*\\/\\/(www\\.)?)/).test( href ),\r\n\t\t\t\text\t\t\t= (baseElem && !extreg) || extreg;\r\n\r\n\t\t\t//make sure it's an external stylesheet\r\n\t\t\tif( thislink.rel.indexOf( \"stylesheet\" ) >= 0 && ext ){\r\n\t\t\t\t(function( link ){\t\t\t\r\n\t\t\t\t\tfakejax( href, function( css ){\r\n\t\t\t\t\t\tlink.styleSheet.rawCssText = css;\r\n\t\t\t\t\t\trespond.update();\r\n\t\t\t\t\t} );\r\n\t\t\t\t})( thislink );\r\n\t\t\t}\t\r\n\t\t}\r\n\r\n\t\t\r\n\t}\r\n\t\r\n\tif( !respond.mediaQueriesSupported ){\r\n\t\tcheckRedirectURL();\r\n\t\tbuildUrls();\r\n\t}\r\n\r\n})( window, document );\r\n","/home/travis/build/npmtest/node-npmtest-respond.js/node_modules/respond.js/dest/respond.matchmedia.addListener.src.js":"/*! Respond.js v1.4.2: min/max-width media query polyfill\r\n * Copyright 2014 Scott Jehl\r\n * Licensed under MIT\r\n * http://j.mp/respondjs */\r\n\r\n/*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas. Dual MIT/BSD license */\r\n/*! NOTE: If you're already including a window.matchMedia polyfill via Modernizr or otherwise, you don't need this part */\r\n(function(w) {\r\n  \"use strict\";\r\n  w.matchMedia = w.matchMedia || function(doc, undefined) {\r\n    var bool, docElem = doc.documentElement, refNode = docElem.firstElementChild || docElem.firstChild, fakeBody = doc.createElement(\"body\"), div = doc.createElement(\"div\");\r\n    div.id = \"mq-test-1\";\r\n    div.style.cssText = \"position:absolute;top:-100em\";\r\n    fakeBody.style.background = \"none\";\r\n    fakeBody.appendChild(div);\r\n    return function(q) {\r\n      div.innerHTML = '&shy;<style media=\"' + q + '\"> #mq-test-1 { width: 42px; }</style>';\r\n      docElem.insertBefore(fakeBody, refNode);\r\n      bool = div.offsetWidth === 42;\r\n      docElem.removeChild(fakeBody);\r\n      return {\r\n        matches: bool,\r\n        media: q\r\n      };\r\n    };\r\n  }(w.document);\r\n})(this);\r\n\r\n/*! matchMedia() polyfill addListener/removeListener extension. Author & copyright (c) 2012: Scott Jehl. Dual MIT/BSD license */\r\n(function(w) {\r\n  \"use strict\";\r\n  if (w.matchMedia && w.matchMedia(\"all\").addListener) {\r\n    return false;\r\n  }\r\n  var localMatchMedia = w.matchMedia, hasMediaQueries = localMatchMedia(\"only all\").matches, isListening = false, timeoutID = 0, queries = [], handleChange = function(evt) {\r\n    w.clearTimeout(timeoutID);\r\n    timeoutID = w.setTimeout(function() {\r\n      for (var i = 0, il = queries.length; i < il; i++) {\r\n        var mql = queries[i].mql, listeners = queries[i].listeners || [], matches = localMatchMedia(mql.media).matches;\r\n        if (matches !== mql.matches) {\r\n          mql.matches = matches;\r\n          for (var j = 0, jl = listeners.length; j < jl; j++) {\r\n            listeners[j].call(w, mql);\r\n          }\r\n        }\r\n      }\r\n    }, 30);\r\n  };\r\n  w.matchMedia = function(media) {\r\n    var mql = localMatchMedia(media), listeners = [], index = 0;\r\n    mql.addListener = function(listener) {\r\n      if (!hasMediaQueries) {\r\n        return;\r\n      }\r\n      if (!isListening) {\r\n        isListening = true;\r\n        w.addEventListener(\"resize\", handleChange, true);\r\n      }\r\n      if (index === 0) {\r\n        index = queries.push({\r\n          mql: mql,\r\n          listeners: listeners\r\n        });\r\n      }\r\n      listeners.push(listener);\r\n    };\r\n    mql.removeListener = function(listener) {\r\n      for (var i = 0, il = listeners.length; i < il; i++) {\r\n        if (listeners[i] === listener) {\r\n          listeners.splice(i, 1);\r\n        }\r\n      }\r\n    };\r\n    return mql;\r\n  };\r\n})(this);\r\n\r\n(function(w) {\r\n  \"use strict\";\r\n  var respond = {};\r\n  w.respond = respond;\r\n  respond.update = function() {};\r\n  var requestQueue = [], xmlHttp = function() {\r\n    var xmlhttpmethod = false;\r\n    try {\r\n      xmlhttpmethod = new w.XMLHttpRequest();\r\n    } catch (e) {\r\n      xmlhttpmethod = new w.ActiveXObject(\"Microsoft.XMLHTTP\");\r\n    }\r\n    return function() {\r\n      return xmlhttpmethod;\r\n    };\r\n  }(), ajax = function(url, callback) {\r\n    var req = xmlHttp();\r\n    if (!req) {\r\n      return;\r\n    }\r\n    req.open(\"GET\", url, true);\r\n    req.onreadystatechange = function() {\r\n      if (req.readyState !== 4 || req.status !== 200 && req.status !== 304) {\r\n        return;\r\n      }\r\n      callback(req.responseText);\r\n    };\r\n    if (req.readyState === 4) {\r\n      return;\r\n    }\r\n    req.send(null);\r\n  }, isUnsupportedMediaQuery = function(query) {\r\n    return query.replace(respond.regex.minmaxwh, \"\").match(respond.regex.other);\r\n  };\r\n  respond.ajax = ajax;\r\n  respond.queue = requestQueue;\r\n  respond.unsupportedmq = isUnsupportedMediaQuery;\r\n  respond.regex = {\r\n    media: /@media[^\\{]+\\{([^\\{\\}]*\\{[^\\}\\{]*\\})+/gi,\r\n    keyframes: /@(?:\\-(?:o|moz|webkit)\\-)?keyframes[^\\{]+\\{(?:[^\\{\\}]*\\{[^\\}\\{]*\\})+[^\\}]*\\}/gi,\r\n    comments: /\\/\\*[^*]*\\*+([^/][^*]*\\*+)*\\//gi,\r\n    urls: /(url\\()['\"]?([^\\/\\)'\"][^:\\)'\"]+)['\"]?(\\))/g,\r\n    findStyles: /@media *([^\\{]+)\\{([\\S\\s]+?)$/,\r\n    only: /(only\\s+)?([a-zA-Z]+)\\s?/,\r\n    minw: /\\(\\s*min\\-width\\s*:\\s*(\\s*[0-9\\.]+)(px|em)\\s*\\)/,\r\n    maxw: /\\(\\s*max\\-width\\s*:\\s*(\\s*[0-9\\.]+)(px|em)\\s*\\)/,\r\n    minmaxwh: /\\(\\s*m(in|ax)\\-(height|width)\\s*:\\s*(\\s*[0-9\\.]+)(px|em)\\s*\\)/gi,\r\n    other: /\\([^\\)]*\\)/g\r\n  };\r\n  respond.mediaQueriesSupported = w.matchMedia && w.matchMedia(\"only all\") !== null && w.matchMedia(\"only all\").matches;\r\n  if (respond.mediaQueriesSupported) {\r\n    return;\r\n  }\r\n  var doc = w.document, docElem = doc.documentElement, mediastyles = [], rules = [], appendedEls = [], parsedSheets = {}, resizeThrottle = 30, head = doc.getElementsByTagName(\"head\")[0] || docElem, base = doc.getElementsByTagName(\"base\")[0], links = head.getElementsByTagName(\"link\"), lastCall, resizeDefer, eminpx, getEmValue = function() {\r\n    var ret, div = doc.createElement(\"div\"), body = doc.body, originalHTMLFontSize = docElem.style.fontSize, originalBodyFontSize = body && body.style.fontSize, fakeUsed = false;\r\n    div.style.cssText = \"position:absolute;font-size:1em;width:1em\";\r\n    if (!body) {\r\n      body = fakeUsed = doc.createElement(\"body\");\r\n      body.style.background = \"none\";\r\n    }\r\n    docElem.style.fontSize = \"100%\";\r\n    body.style.fontSize = \"100%\";\r\n    body.appendChild(div);\r\n    if (fakeUsed) {\r\n      docElem.insertBefore(body, docElem.firstChild);\r\n    }\r\n    ret = div.offsetWidth;\r\n    if (fakeUsed) {\r\n      docElem.removeChild(body);\r\n    } else {\r\n      body.removeChild(div);\r\n    }\r\n    docElem.style.fontSize = originalHTMLFontSize;\r\n    if (originalBodyFontSize) {\r\n      body.style.fontSize = originalBodyFontSize;\r\n    }\r\n    ret = eminpx = parseFloat(ret);\r\n    return ret;\r\n  }, applyMedia = function(fromResize) {\r\n    var name = \"clientWidth\", docElemProp = docElem[name], currWidth = doc.compatMode === \"CSS1Compat\" && docElemProp || doc.body[name] || docElemProp, styleBlocks = {}, lastLink = links[links.length - 1], now = new Date().getTime();\r\n    if (fromResize && lastCall && now - lastCall < resizeThrottle) {\r\n      w.clearTimeout(resizeDefer);\r\n      resizeDefer = w.setTimeout(applyMedia, resizeThrottle);\r\n      return;\r\n    } else {\r\n      lastCall = now;\r\n    }\r\n    for (var i in mediastyles) {\r\n      if (mediastyles.hasOwnProperty(i)) {\r\n        var thisstyle = mediastyles[i], min = thisstyle.minw, max = thisstyle.maxw, minnull = min === null, maxnull = max === null, em = \"em\";\r\n        if (!!min) {\r\n          min = parseFloat(min) * (min.indexOf(em) > -1 ? eminpx || getEmValue() : 1);\r\n        }\r\n        if (!!max) {\r\n          max = parseFloat(max) * (max.indexOf(em) > -1 ? eminpx || getEmValue() : 1);\r\n        }\r\n        if (!thisstyle.hasquery || (!minnull || !maxnull) && (minnull || currWidth >= min) && (maxnull || currWidth <= max)) {\r\n          if (!styleBlocks[thisstyle.media]) {\r\n            styleBlocks[thisstyle.media] = [];\r\n          }\r\n          styleBlocks[thisstyle.media].push(rules[thisstyle.rules]);\r\n        }\r\n      }\r\n    }\r\n    for (var j in appendedEls) {\r\n      if (appendedEls.hasOwnProperty(j)) {\r\n        if (appendedEls[j] && appendedEls[j].parentNode === head) {\r\n          head.removeChild(appendedEls[j]);\r\n        }\r\n      }\r\n    }\r\n    appendedEls.length = 0;\r\n    for (var k in styleBlocks) {\r\n      if (styleBlocks.hasOwnProperty(k)) {\r\n        var ss = doc.createElement(\"style\"), css = styleBlocks[k].join(\"\\n\");\r\n        ss.type = \"text/css\";\r\n        ss.media = k;\r\n        head.insertBefore(ss, lastLink.nextSibling);\r\n        if (ss.styleSheet) {\r\n          ss.styleSheet.cssText = css;\r\n        } else {\r\n          ss.appendChild(doc.createTextNode(css));\r\n        }\r\n        appendedEls.push(ss);\r\n      }\r\n    }\r\n  }, translate = function(styles, href, media) {\r\n    var qs = styles.replace(respond.regex.comments, \"\").replace(respond.regex.keyframes, \"\").match(respond.regex.media), ql = qs && qs.length || 0;\r\n    href = href.substring(0, href.lastIndexOf(\"/\"));\r\n    var repUrls = function(css) {\r\n      return css.replace(respond.regex.urls, \"$1\" + href + \"$2$3\");\r\n    }, useMedia = !ql && media;\r\n    if (href.length) {\r\n      href += \"/\";\r\n    }\r\n    if (useMedia) {\r\n      ql = 1;\r\n    }\r\n    for (var i = 0; i < ql; i++) {\r\n      var fullq, thisq, eachq, eql;\r\n      if (useMedia) {\r\n        fullq = media;\r\n        rules.push(repUrls(styles));\r\n      } else {\r\n        fullq = qs[i].match(respond.regex.findStyles) && RegExp.$1;\r\n        rules.push(RegExp.$2 && repUrls(RegExp.$2));\r\n      }\r\n      eachq = fullq.split(\",\");\r\n      eql = eachq.length;\r\n      for (var j = 0; j < eql; j++) {\r\n        thisq = eachq[j];\r\n        if (isUnsupportedMediaQuery(thisq)) {\r\n          continue;\r\n        }\r\n        mediastyles.push({\r\n          media: thisq.split(\"(\")[0].match(respond.regex.only) && RegExp.$2 || \"all\",\r\n          rules: rules.length - 1,\r\n          hasquery: thisq.indexOf(\"(\") > -1,\r\n          minw: thisq.match(respond.regex.minw) && parseFloat(RegExp.$1) + (RegExp.$2 || \"\"),\r\n          maxw: thisq.match(respond.regex.maxw) && parseFloat(RegExp.$1) + (RegExp.$2 || \"\")\r\n        });\r\n      }\r\n    }\r\n    applyMedia();\r\n  }, makeRequests = function() {\r\n    if (requestQueue.length) {\r\n      var thisRequest = requestQueue.shift();\r\n      ajax(thisRequest.href, function(styles) {\r\n        translate(styles, thisRequest.href, thisRequest.media);\r\n        parsedSheets[thisRequest.href] = true;\r\n        w.setTimeout(function() {\r\n          makeRequests();\r\n        }, 0);\r\n      });\r\n    }\r\n  }, ripCSS = function() {\r\n    for (var i = 0; i < links.length; i++) {\r\n      var sheet = links[i], href = sheet.href, media = sheet.media, isCSS = sheet.rel && sheet.rel.toLowerCase() === \"stylesheet\";\r\n      if (!!href && isCSS && !parsedSheets[href]) {\r\n        if (sheet.styleSheet && sheet.styleSheet.rawCssText) {\r\n          translate(sheet.styleSheet.rawCssText, href, media);\r\n          parsedSheets[href] = true;\r\n        } else {\r\n          if (!/^([a-zA-Z:]*\\/\\/)/.test(href) && !base || href.replace(RegExp.$1, \"\").split(\"/\")[0] === w.location.host) {\r\n            if (href.substring(0, 2) === \"//\") {\r\n              href = w.location.protocol + href;\r\n            }\r\n            requestQueue.push({\r\n              href: href,\r\n              media: media\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    makeRequests();\r\n  };\r\n  ripCSS();\r\n  respond.update = ripCSS;\r\n  respond.getEmValue = getEmValue;\r\n  function callMedia() {\r\n    applyMedia(true);\r\n  }\r\n  if (w.addEventListener) {\r\n    w.addEventListener(\"resize\", callMedia, false);\r\n  } else if (w.attachEvent) {\r\n    w.attachEvent(\"onresize\", callMedia);\r\n  }\r\n})(this);","/home/travis/build/npmtest/node-npmtest-respond.js/node_modules/respond.js/dest/respond.src.js":"/*! Respond.js v1.4.2: min/max-width media query polyfill\r\n * Copyright 2014 Scott Jehl\r\n * Licensed under MIT\r\n * http://j.mp/respondjs */\r\n\r\n/*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas. Dual MIT/BSD license */\r\n/*! NOTE: If you're already including a window.matchMedia polyfill via Modernizr or otherwise, you don't need this part */\r\n(function(w) {\r\n  \"use strict\";\r\n  w.matchMedia = w.matchMedia || function(doc, undefined) {\r\n    var bool, docElem = doc.documentElement, refNode = docElem.firstElementChild || docElem.firstChild, fakeBody = doc.createElement(\"body\"), div = doc.createElement(\"div\");\r\n    div.id = \"mq-test-1\";\r\n    div.style.cssText = \"position:absolute;top:-100em\";\r\n    fakeBody.style.background = \"none\";\r\n    fakeBody.appendChild(div);\r\n    return function(q) {\r\n      div.innerHTML = '&shy;<style media=\"' + q + '\"> #mq-test-1 { width: 42px; }</style>';\r\n      docElem.insertBefore(fakeBody, refNode);\r\n      bool = div.offsetWidth === 42;\r\n      docElem.removeChild(fakeBody);\r\n      return {\r\n        matches: bool,\r\n        media: q\r\n      };\r\n    };\r\n  }(w.document);\r\n})(this);\r\n\r\n(function(w) {\r\n  \"use strict\";\r\n  var respond = {};\r\n  w.respond = respond;\r\n  respond.update = function() {};\r\n  var requestQueue = [], xmlHttp = function() {\r\n    var xmlhttpmethod = false;\r\n    try {\r\n      xmlhttpmethod = new w.XMLHttpRequest();\r\n    } catch (e) {\r\n      xmlhttpmethod = new w.ActiveXObject(\"Microsoft.XMLHTTP\");\r\n    }\r\n    return function() {\r\n      return xmlhttpmethod;\r\n    };\r\n  }(), ajax = function(url, callback) {\r\n    var req = xmlHttp();\r\n    if (!req) {\r\n      return;\r\n    }\r\n    req.open(\"GET\", url, true);\r\n    req.onreadystatechange = function() {\r\n      if (req.readyState !== 4 || req.status !== 200 && req.status !== 304) {\r\n        return;\r\n      }\r\n      callback(req.responseText);\r\n    };\r\n    if (req.readyState === 4) {\r\n      return;\r\n    }\r\n    req.send(null);\r\n  }, isUnsupportedMediaQuery = function(query) {\r\n    return query.replace(respond.regex.minmaxwh, \"\").match(respond.regex.other);\r\n  };\r\n  respond.ajax = ajax;\r\n  respond.queue = requestQueue;\r\n  respond.unsupportedmq = isUnsupportedMediaQuery;\r\n  respond.regex = {\r\n    media: /@media[^\\{]+\\{([^\\{\\}]*\\{[^\\}\\{]*\\})+/gi,\r\n    keyframes: /@(?:\\-(?:o|moz|webkit)\\-)?keyframes[^\\{]+\\{(?:[^\\{\\}]*\\{[^\\}\\{]*\\})+[^\\}]*\\}/gi,\r\n    comments: /\\/\\*[^*]*\\*+([^/][^*]*\\*+)*\\//gi,\r\n    urls: /(url\\()['\"]?([^\\/\\)'\"][^:\\)'\"]+)['\"]?(\\))/g,\r\n    findStyles: /@media *([^\\{]+)\\{([\\S\\s]+?)$/,\r\n    only: /(only\\s+)?([a-zA-Z]+)\\s?/,\r\n    minw: /\\(\\s*min\\-width\\s*:\\s*(\\s*[0-9\\.]+)(px|em)\\s*\\)/,\r\n    maxw: /\\(\\s*max\\-width\\s*:\\s*(\\s*[0-9\\.]+)(px|em)\\s*\\)/,\r\n    minmaxwh: /\\(\\s*m(in|ax)\\-(height|width)\\s*:\\s*(\\s*[0-9\\.]+)(px|em)\\s*\\)/gi,\r\n    other: /\\([^\\)]*\\)/g\r\n  };\r\n  respond.mediaQueriesSupported = w.matchMedia && w.matchMedia(\"only all\") !== null && w.matchMedia(\"only all\").matches;\r\n  if (respond.mediaQueriesSupported) {\r\n    return;\r\n  }\r\n  var doc = w.document, docElem = doc.documentElement, mediastyles = [], rules = [], appendedEls = [], parsedSheets = {}, resizeThrottle = 30, head = doc.getElementsByTagName(\"head\")[0] || docElem, base = doc.getElementsByTagName(\"base\")[0], links = head.getElementsByTagName(\"link\"), lastCall, resizeDefer, eminpx, getEmValue = function() {\r\n    var ret, div = doc.createElement(\"div\"), body = doc.body, originalHTMLFontSize = docElem.style.fontSize, originalBodyFontSize = body && body.style.fontSize, fakeUsed = false;\r\n    div.style.cssText = \"position:absolute;font-size:1em;width:1em\";\r\n    if (!body) {\r\n      body = fakeUsed = doc.createElement(\"body\");\r\n      body.style.background = \"none\";\r\n    }\r\n    docElem.style.fontSize = \"100%\";\r\n    body.style.fontSize = \"100%\";\r\n    body.appendChild(div);\r\n    if (fakeUsed) {\r\n      docElem.insertBefore(body, docElem.firstChild);\r\n    }\r\n    ret = div.offsetWidth;\r\n    if (fakeUsed) {\r\n      docElem.removeChild(body);\r\n    } else {\r\n      body.removeChild(div);\r\n    }\r\n    docElem.style.fontSize = originalHTMLFontSize;\r\n    if (originalBodyFontSize) {\r\n      body.style.fontSize = originalBodyFontSize;\r\n    }\r\n    ret = eminpx = parseFloat(ret);\r\n    return ret;\r\n  }, applyMedia = function(fromResize) {\r\n    var name = \"clientWidth\", docElemProp = docElem[name], currWidth = doc.compatMode === \"CSS1Compat\" && docElemProp || doc.body[name] || docElemProp, styleBlocks = {}, lastLink = links[links.length - 1], now = new Date().getTime();\r\n    if (fromResize && lastCall && now - lastCall < resizeThrottle) {\r\n      w.clearTimeout(resizeDefer);\r\n      resizeDefer = w.setTimeout(applyMedia, resizeThrottle);\r\n      return;\r\n    } else {\r\n      lastCall = now;\r\n    }\r\n    for (var i in mediastyles) {\r\n      if (mediastyles.hasOwnProperty(i)) {\r\n        var thisstyle = mediastyles[i], min = thisstyle.minw, max = thisstyle.maxw, minnull = min === null, maxnull = max === null, em = \"em\";\r\n        if (!!min) {\r\n          min = parseFloat(min) * (min.indexOf(em) > -1 ? eminpx || getEmValue() : 1);\r\n        }\r\n        if (!!max) {\r\n          max = parseFloat(max) * (max.indexOf(em) > -1 ? eminpx || getEmValue() : 1);\r\n        }\r\n        if (!thisstyle.hasquery || (!minnull || !maxnull) && (minnull || currWidth >= min) && (maxnull || currWidth <= max)) {\r\n          if (!styleBlocks[thisstyle.media]) {\r\n            styleBlocks[thisstyle.media] = [];\r\n          }\r\n          styleBlocks[thisstyle.media].push(rules[thisstyle.rules]);\r\n        }\r\n      }\r\n    }\r\n    for (var j in appendedEls) {\r\n      if (appendedEls.hasOwnProperty(j)) {\r\n        if (appendedEls[j] && appendedEls[j].parentNode === head) {\r\n          head.removeChild(appendedEls[j]);\r\n        }\r\n      }\r\n    }\r\n    appendedEls.length = 0;\r\n    for (var k in styleBlocks) {\r\n      if (styleBlocks.hasOwnProperty(k)) {\r\n        var ss = doc.createElement(\"style\"), css = styleBlocks[k].join(\"\\n\");\r\n        ss.type = \"text/css\";\r\n        ss.media = k;\r\n        head.insertBefore(ss, lastLink.nextSibling);\r\n        if (ss.styleSheet) {\r\n          ss.styleSheet.cssText = css;\r\n        } else {\r\n          ss.appendChild(doc.createTextNode(css));\r\n        }\r\n        appendedEls.push(ss);\r\n      }\r\n    }\r\n  }, translate = function(styles, href, media) {\r\n    var qs = styles.replace(respond.regex.comments, \"\").replace(respond.regex.keyframes, \"\").match(respond.regex.media), ql = qs && qs.length || 0;\r\n    href = href.substring(0, href.lastIndexOf(\"/\"));\r\n    var repUrls = function(css) {\r\n      return css.replace(respond.regex.urls, \"$1\" + href + \"$2$3\");\r\n    }, useMedia = !ql && media;\r\n    if (href.length) {\r\n      href += \"/\";\r\n    }\r\n    if (useMedia) {\r\n      ql = 1;\r\n    }\r\n    for (var i = 0; i < ql; i++) {\r\n      var fullq, thisq, eachq, eql;\r\n      if (useMedia) {\r\n        fullq = media;\r\n        rules.push(repUrls(styles));\r\n      } else {\r\n        fullq = qs[i].match(respond.regex.findStyles) && RegExp.$1;\r\n        rules.push(RegExp.$2 && repUrls(RegExp.$2));\r\n      }\r\n      eachq = fullq.split(\",\");\r\n      eql = eachq.length;\r\n      for (var j = 0; j < eql; j++) {\r\n        thisq = eachq[j];\r\n        if (isUnsupportedMediaQuery(thisq)) {\r\n          continue;\r\n        }\r\n        mediastyles.push({\r\n          media: thisq.split(\"(\")[0].match(respond.regex.only) && RegExp.$2 || \"all\",\r\n          rules: rules.length - 1,\r\n          hasquery: thisq.indexOf(\"(\") > -1,\r\n          minw: thisq.match(respond.regex.minw) && parseFloat(RegExp.$1) + (RegExp.$2 || \"\"),\r\n          maxw: thisq.match(respond.regex.maxw) && parseFloat(RegExp.$1) + (RegExp.$2 || \"\")\r\n        });\r\n      }\r\n    }\r\n    applyMedia();\r\n  }, makeRequests = function() {\r\n    if (requestQueue.length) {\r\n      var thisRequest = requestQueue.shift();\r\n      ajax(thisRequest.href, function(styles) {\r\n        translate(styles, thisRequest.href, thisRequest.media);\r\n        parsedSheets[thisRequest.href] = true;\r\n        w.setTimeout(function() {\r\n          makeRequests();\r\n        }, 0);\r\n      });\r\n    }\r\n  }, ripCSS = function() {\r\n    for (var i = 0; i < links.length; i++) {\r\n      var sheet = links[i], href = sheet.href, media = sheet.media, isCSS = sheet.rel && sheet.rel.toLowerCase() === \"stylesheet\";\r\n      if (!!href && isCSS && !parsedSheets[href]) {\r\n        if (sheet.styleSheet && sheet.styleSheet.rawCssText) {\r\n          translate(sheet.styleSheet.rawCssText, href, media);\r\n          parsedSheets[href] = true;\r\n        } else {\r\n          if (!/^([a-zA-Z:]*\\/\\/)/.test(href) && !base || href.replace(RegExp.$1, \"\").split(\"/\")[0] === w.location.host) {\r\n            if (href.substring(0, 2) === \"//\") {\r\n              href = w.location.protocol + href;\r\n            }\r\n            requestQueue.push({\r\n              href: href,\r\n              media: media\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    makeRequests();\r\n  };\r\n  ripCSS();\r\n  respond.update = ripCSS;\r\n  respond.getEmValue = getEmValue;\r\n  function callMedia() {\r\n    applyMedia(true);\r\n  }\r\n  if (w.addEventListener) {\r\n    w.addEventListener(\"resize\", callMedia, false);\r\n  } else if (w.attachEvent) {\r\n    w.attachEvent(\"onresize\", callMedia);\r\n  }\r\n})(this);","/home/travis/build/npmtest/node-npmtest-respond.js/node_modules/respond.js/src/matchmedia.addListener.js":"/*! matchMedia() polyfill addListener/removeListener extension. Author & copyright (c) 2012: Scott Jehl. Dual MIT/BSD license */\r\n(function( w ){\r\n\t\"use strict\";\r\n\t// Bail out for browsers that have addListener support\r\n\tif (w.matchMedia && w.matchMedia('all').addListener) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar localMatchMedia = w.matchMedia,\r\n\t\thasMediaQueries = localMatchMedia('only all').matches,\r\n\t\tisListening     = false,\r\n\t\ttimeoutID       = 0,    // setTimeout for debouncing 'handleChange'\r\n\t\tqueries         = [],   // Contains each 'mql' and associated 'listeners' if 'addListener' is used\r\n\t\thandleChange    = function(evt) {\r\n\t\t\t// Debounce\r\n\t\t\tw.clearTimeout(timeoutID);\r\n\r\n\t\t\ttimeoutID = w.setTimeout(function() {\r\n\t\t\t\tfor (var i = 0, il = queries.length; i < il; i++) {\r\n\t\t\t\t\tvar mql         = queries[i].mql,\r\n\t\t\t\t\t\tlisteners   = queries[i].listeners || [],\r\n\t\t\t\t\t\tmatches     = localMatchMedia(mql.media).matches;\r\n\r\n\t\t\t\t\t// Update mql.matches value and call listeners\r\n\t\t\t\t\t// Fire listeners only if transitioning to or from matched state\r\n\t\t\t\t\tif (matches !== mql.matches) {\r\n\t\t\t\t\t\tmql.matches = matches;\r\n\r\n\t\t\t\t\t\tfor (var j = 0, jl = listeners.length; j < jl; j++) {\r\n\t\t\t\t\t\t\tlisteners[j].call(w, mql);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, 30);\r\n\t\t};\r\n\r\n\tw.matchMedia = function(media) {\r\n\t\tvar mql         = localMatchMedia(media),\r\n\t\t\tlisteners   = [],\r\n\t\t\tindex       = 0;\r\n\r\n\t\tmql.addListener = function(listener) {\r\n\t\t\t// Changes would not occur to css media type so return now (Affects IE <= 8)\r\n\t\t\tif (!hasMediaQueries) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Set up 'resize' listener for browsers that support CSS3 media queries (Not for IE <= 8)\r\n\t\t\t// There should only ever be 1 resize listener running for performance\r\n\t\t\tif (!isListening) {\r\n\t\t\t\tisListening = true;\r\n\t\t\t\tw.addEventListener('resize', handleChange, true);\r\n\t\t\t}\r\n\r\n\t\t\t// Push object only if it has not been pushed already\r\n\t\t\tif (index === 0) {\r\n\t\t\t\tindex = queries.push({\r\n\t\t\t\t\tmql         : mql,\r\n\t\t\t\t\tlisteners   : listeners\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tlisteners.push(listener);\r\n\t\t};\r\n\r\n\t\tmql.removeListener = function(listener) {\r\n\t\t\tfor (var i = 0, il = listeners.length; i < il; i++){\r\n\t\t\t\tif (listeners[i] === listener){\r\n\t\t\t\t\tlisteners.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treturn mql;\r\n\t};\r\n}( this ));\r\n","/home/travis/build/npmtest/node-npmtest-respond.js/node_modules/respond.js/src/matchmedia.polyfill.js":"/*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas. Dual MIT/BSD license */\r\n/*! NOTE: If you're already including a window.matchMedia polyfill via Modernizr or otherwise, you don't need this part */\r\n\r\n(function(w){\r\n\t\"use strict\";\r\n\tw.matchMedia = w.matchMedia || (function( doc, undefined ) {\r\n\r\n\t\tvar bool,\r\n\t\t\tdocElem = doc.documentElement,\r\n\t\t\trefNode = docElem.firstElementChild || docElem.firstChild,\r\n\t\t\t// fakeBody required for <FF4 when executed in <head>\r\n\t\t\tfakeBody = doc.createElement( \"body\" ),\r\n\t\t\tdiv = doc.createElement( \"div\" );\r\n\r\n\t\tdiv.id = \"mq-test-1\";\r\n\t\tdiv.style.cssText = \"position:absolute;top:-100em\";\r\n\t\tfakeBody.style.background = \"none\";\r\n\t\tfakeBody.appendChild(div);\r\n\r\n\t\treturn function(q){\r\n\r\n\t\t\tdiv.innerHTML = \"&shy;<style media=\\\"\" + q + \"\\\"> #mq-test-1 { width: 42px; }</style>\";\r\n\r\n\t\t\tdocElem.insertBefore( fakeBody, refNode );\r\n\t\t\tbool = div.offsetWidth === 42;\r\n\t\t\tdocElem.removeChild( fakeBody );\r\n\r\n\t\t\treturn {\r\n\t\t\t\tmatches: bool,\r\n\t\t\t\tmedia: q\r\n\t\t\t};\r\n\r\n\t\t};\r\n\r\n\t}( w.document ));\r\n}( this ));\r\n","/home/travis/build/npmtest/node-npmtest-respond.js/node_modules/respond.js/src/respond.js":"/* Respond.js: min/max-width media query polyfill. (c) Scott Jehl. MIT Lic. j.mp/respondjs  */\r\n(function( w ){\r\n\r\n\t\"use strict\";\r\n\r\n\t//exposed namespace\r\n\tvar respond = {};\r\n\tw.respond = respond;\r\n\r\n\t//define update even in native-mq-supporting browsers, to avoid errors\r\n\trespond.update = function(){};\r\n\r\n\t//define ajax obj\r\n\tvar requestQueue = [],\r\n\t\txmlHttp = (function() {\r\n\t\t\tvar xmlhttpmethod = false;\r\n\t\t\ttry {\r\n\t\t\t\txmlhttpmethod = new w.XMLHttpRequest();\r\n\t\t\t}\r\n\t\t\tcatch( e ){\r\n\t\t\t\txmlhttpmethod = new w.ActiveXObject( \"Microsoft.XMLHTTP\" );\r\n\t\t\t}\r\n\t\t\treturn function(){\r\n\t\t\t\treturn xmlhttpmethod;\r\n\t\t\t};\r\n\t\t})(),\r\n\r\n\t\t//tweaked Ajax functions from Quirksmode\r\n\t\tajax = function( url, callback ) {\r\n\t\t\tvar req = xmlHttp();\r\n\t\t\tif (!req){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\treq.open( \"GET\", url, true );\r\n\t\t\treq.onreadystatechange = function () {\r\n\t\t\t\tif ( req.readyState !== 4 || req.status !== 200 && req.status !== 304 ){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcallback( req.responseText );\r\n\t\t\t};\r\n\t\t\tif ( req.readyState === 4 ){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\treq.send( null );\r\n\t\t},\r\n\t\tisUnsupportedMediaQuery = function( query ) {\r\n\t\t\treturn query.replace( respond.regex.minmaxwh, '' ).match( respond.regex.other );\r\n\t\t};\r\n\r\n\t//expose for testing\r\n\trespond.ajax = ajax;\r\n\trespond.queue = requestQueue;\r\n\trespond.unsupportedmq = isUnsupportedMediaQuery;\r\n\trespond.regex = {\r\n\t\tmedia: /@media[^\\{]+\\{([^\\{\\}]*\\{[^\\}\\{]*\\})+/gi,\r\n\t\tkeyframes: /@(?:\\-(?:o|moz|webkit)\\-)?keyframes[^\\{]+\\{(?:[^\\{\\}]*\\{[^\\}\\{]*\\})+[^\\}]*\\}/gi,\r\n\t\tcomments: /\\/\\*[^*]*\\*+([^/][^*]*\\*+)*\\//gi,\r\n\t\turls: /(url\\()['\"]?([^\\/\\)'\"][^:\\)'\"]+)['\"]?(\\))/g,\r\n\t\tfindStyles: /@media *([^\\{]+)\\{([\\S\\s]+?)$/,\r\n\t\tonly: /(only\\s+)?([a-zA-Z]+)\\s?/,\r\n\t\tminw: /\\(\\s*min\\-width\\s*:\\s*(\\s*[0-9\\.]+)(px|em)\\s*\\)/,\r\n\t\tmaxw: /\\(\\s*max\\-width\\s*:\\s*(\\s*[0-9\\.]+)(px|em)\\s*\\)/,\r\n\t\tminmaxwh: /\\(\\s*m(in|ax)\\-(height|width)\\s*:\\s*(\\s*[0-9\\.]+)(px|em)\\s*\\)/gi,\r\n\t\tother: /\\([^\\)]*\\)/g\r\n\t};\r\n\r\n\t//expose media query support flag for external use\r\n\trespond.mediaQueriesSupported = w.matchMedia && w.matchMedia( \"only all\" ) !== null && w.matchMedia( \"only all\" ).matches;\r\n\r\n\t//if media queries are supported, exit here\r\n\tif( respond.mediaQueriesSupported ){\r\n\t\treturn;\r\n\t}\r\n\r\n\t//define vars\r\n\tvar doc = w.document,\r\n\t\tdocElem = doc.documentElement,\r\n\t\tmediastyles = [],\r\n\t\trules = [],\r\n\t\tappendedEls = [],\r\n\t\tparsedSheets = {},\r\n\t\tresizeThrottle = 30,\r\n\t\thead = doc.getElementsByTagName( \"head\" )[0] || docElem,\r\n\t\tbase = doc.getElementsByTagName( \"base\" )[0],\r\n\t\tlinks = head.getElementsByTagName( \"link\" ),\r\n\r\n\t\tlastCall,\r\n\t\tresizeDefer,\r\n\r\n\t\t//cached container for 1em value, populated the first time it's needed\r\n\t\teminpx,\r\n\r\n\t\t// returns the value of 1em in pixels\r\n\t\tgetEmValue = function() {\r\n\t\t\tvar ret,\r\n\t\t\t\tdiv = doc.createElement('div'),\r\n\t\t\t\tbody = doc.body,\r\n\t\t\t\toriginalHTMLFontSize = docElem.style.fontSize,\r\n\t\t\t\toriginalBodyFontSize = body && body.style.fontSize,\r\n\t\t\t\tfakeUsed = false;\r\n\r\n\t\t\tdiv.style.cssText = \"position:absolute;font-size:1em;width:1em\";\r\n\r\n\t\t\tif( !body ){\r\n\t\t\t\tbody = fakeUsed = doc.createElement( \"body\" );\r\n\t\t\t\tbody.style.background = \"none\";\r\n\t\t\t}\r\n\r\n\t\t\t// 1em in a media query is the value of the default font size of the browser\r\n\t\t\t// reset docElem and body to ensure the correct value is returned\r\n\t\t\tdocElem.style.fontSize = \"100%\";\r\n\t\t\tbody.style.fontSize = \"100%\";\r\n\r\n\t\t\tbody.appendChild( div );\r\n\r\n\t\t\tif( fakeUsed ){\r\n\t\t\t\tdocElem.insertBefore( body, docElem.firstChild );\r\n\t\t\t}\r\n\r\n\t\t\tret = div.offsetWidth;\r\n\r\n\t\t\tif( fakeUsed ){\r\n\t\t\t\tdocElem.removeChild( body );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbody.removeChild( div );\r\n\t\t\t}\r\n\r\n\t\t\t// restore the original values\r\n\t\t\tdocElem.style.fontSize = originalHTMLFontSize;\r\n\t\t\tif( originalBodyFontSize ) {\r\n\t\t\t\tbody.style.fontSize = originalBodyFontSize;\r\n\t\t\t}\r\n\r\n\r\n\t\t\t//also update eminpx before returning\r\n\t\t\tret = eminpx = parseFloat(ret);\r\n\r\n\t\t\treturn ret;\r\n\t\t},\r\n\r\n\t\t//enable/disable styles\r\n\t\tapplyMedia = function( fromResize ){\r\n\t\t\tvar name = \"clientWidth\",\r\n\t\t\t\tdocElemProp = docElem[ name ],\r\n\t\t\t\tcurrWidth = doc.compatMode === \"CSS1Compat\" && docElemProp || doc.body[ name ] || docElemProp,\r\n\t\t\t\tstyleBlocks\t= {},\r\n\t\t\t\tlastLink = links[ links.length-1 ],\r\n\t\t\t\tnow = (new Date()).getTime();\r\n\r\n\t\t\t//throttle resize calls\r\n\t\t\tif( fromResize && lastCall && now - lastCall < resizeThrottle ){\r\n\t\t\t\tw.clearTimeout( resizeDefer );\r\n\t\t\t\tresizeDefer = w.setTimeout( applyMedia, resizeThrottle );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlastCall = now;\r\n\t\t\t}\r\n\r\n\t\t\tfor( var i in mediastyles ){\r\n\t\t\t\tif( mediastyles.hasOwnProperty( i ) ){\r\n\t\t\t\t\tvar thisstyle = mediastyles[ i ],\r\n\t\t\t\t\t\tmin = thisstyle.minw,\r\n\t\t\t\t\t\tmax = thisstyle.maxw,\r\n\t\t\t\t\t\tminnull = min === null,\r\n\t\t\t\t\t\tmaxnull = max === null,\r\n\t\t\t\t\t\tem = \"em\";\r\n\r\n\t\t\t\t\tif( !!min ){\r\n\t\t\t\t\t\tmin = parseFloat( min ) * ( min.indexOf( em ) > -1 ? ( eminpx || getEmValue() ) : 1 );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif( !!max ){\r\n\t\t\t\t\t\tmax = parseFloat( max ) * ( max.indexOf( em ) > -1 ? ( eminpx || getEmValue() ) : 1 );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// if there's no media query at all (the () part), or min or max is not null, and if either is present, they're true\r\n\t\t\t\t\tif( !thisstyle.hasquery || ( !minnull || !maxnull ) && ( minnull || currWidth >= min ) && ( maxnull || currWidth <= max ) ){\r\n\t\t\t\t\t\tif( !styleBlocks[ thisstyle.media ] ){\r\n\t\t\t\t\t\t\tstyleBlocks[ thisstyle.media ] = [];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tstyleBlocks[ thisstyle.media ].push( rules[ thisstyle.rules ] );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//remove any existing respond style element(s)\r\n\t\t\tfor( var j in appendedEls ){\r\n\t\t\t\tif( appendedEls.hasOwnProperty( j ) ){\r\n\t\t\t\t\tif( appendedEls[ j ] && appendedEls[ j ].parentNode === head ){\r\n\t\t\t\t\t\thead.removeChild( appendedEls[ j ] );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tappendedEls.length = 0;\r\n\r\n\t\t\t//inject active styles, grouped by media type\r\n\t\t\tfor( var k in styleBlocks ){\r\n\t\t\t\tif( styleBlocks.hasOwnProperty( k ) ){\r\n\t\t\t\t\tvar ss = doc.createElement( \"style\" ),\r\n\t\t\t\t\t\tcss = styleBlocks[ k ].join( \"\\n\" );\r\n\r\n\t\t\t\t\tss.type = \"text/css\";\r\n\t\t\t\t\tss.media = k;\r\n\r\n\t\t\t\t\t//originally, ss was appended to a documentFragment and sheets were appended in bulk.\r\n\t\t\t\t\t//this caused crashes in IE in a number of circumstances, such as when the HTML element had a bg image set, so appending beforehand seems best. Thanks to @dvelyk for the initial research on this one!\r\n\t\t\t\t\thead.insertBefore( ss, lastLink.nextSibling );\r\n\r\n\t\t\t\t\tif ( ss.styleSheet ){\r\n\t\t\t\t\t\tss.styleSheet.cssText = css;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tss.appendChild( doc.createTextNode( css ) );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//push to appendedEls to track for later removal\r\n\t\t\t\t\tappendedEls.push( ss );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t//find media blocks in css text, convert to style blocks\r\n\t\ttranslate = function( styles, href, media ){\r\n\t\t\tvar qs = styles.replace( respond.regex.comments, '' )\r\n\t\t\t\t\t.replace( respond.regex.keyframes, '' )\r\n\t\t\t\t\t.match( respond.regex.media ),\r\n\t\t\t\tql = qs && qs.length || 0;\r\n\r\n\t\t\t//try to get CSS path\r\n\t\t\thref = href.substring( 0, href.lastIndexOf( \"/\" ) );\r\n\r\n\t\t\tvar repUrls = function( css ){\r\n\t\t\t\t\treturn css.replace( respond.regex.urls, \"$1\" + href + \"$2$3\" );\r\n\t\t\t\t},\r\n\t\t\t\tuseMedia = !ql && media;\r\n\r\n\t\t\t//if path exists, tack on trailing slash\r\n\t\t\tif( href.length ){ href += \"/\"; }\r\n\r\n\t\t\t//if no internal queries exist, but media attr does, use that\r\n\t\t\t//note: this currently lacks support for situations where a media attr is specified on a link AND\r\n\t\t\t\t//its associated stylesheet has internal CSS media queries.\r\n\t\t\t\t//In those cases, the media attribute will currently be ignored.\r\n\t\t\tif( useMedia ){\r\n\t\t\t\tql = 1;\r\n\t\t\t}\r\n\r\n\t\t\tfor( var i = 0; i < ql; i++ ){\r\n\t\t\t\tvar fullq, thisq, eachq, eql;\r\n\r\n\t\t\t\t//media attr\r\n\t\t\t\tif( useMedia ){\r\n\t\t\t\t\tfullq = media;\r\n\t\t\t\t\trules.push( repUrls( styles ) );\r\n\t\t\t\t}\r\n\t\t\t\t//parse for styles\r\n\t\t\t\telse{\r\n\t\t\t\t\tfullq = qs[ i ].match( respond.regex.findStyles ) && RegExp.$1;\r\n\t\t\t\t\trules.push( RegExp.$2 && repUrls( RegExp.$2 ) );\r\n\t\t\t\t}\r\n\r\n\t\t\t\teachq = fullq.split( \",\" );\r\n\t\t\t\teql = eachq.length;\r\n\r\n\t\t\t\tfor( var j = 0; j < eql; j++ ){\r\n\t\t\t\t\tthisq = eachq[ j ];\r\n\r\n\t\t\t\t\tif( isUnsupportedMediaQuery( thisq ) ) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmediastyles.push( {\r\n\t\t\t\t\t\tmedia : thisq.split( \"(\" )[ 0 ].match( respond.regex.only ) && RegExp.$2 || \"all\",\r\n\t\t\t\t\t\trules : rules.length - 1,\r\n\t\t\t\t\t\thasquery : thisq.indexOf(\"(\") > -1,\r\n\t\t\t\t\t\tminw : thisq.match( respond.regex.minw ) && parseFloat( RegExp.$1 ) + ( RegExp.$2 || \"\" ),\r\n\t\t\t\t\t\tmaxw : thisq.match( respond.regex.maxw ) && parseFloat( RegExp.$1 ) + ( RegExp.$2 || \"\" )\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tapplyMedia();\r\n\t\t},\r\n\r\n\t\t//recurse through request queue, get css text\r\n\t\tmakeRequests = function(){\r\n\t\t\tif( requestQueue.length ){\r\n\t\t\t\tvar thisRequest = requestQueue.shift();\r\n\r\n\t\t\t\tajax( thisRequest.href, function( styles ){\r\n\t\t\t\t\ttranslate( styles, thisRequest.href, thisRequest.media );\r\n\t\t\t\t\tparsedSheets[ thisRequest.href ] = true;\r\n\r\n\t\t\t\t\t// by wrapping recursive function call in setTimeout\r\n\t\t\t\t\t// we prevent \"Stack overflow\" error in IE7\r\n\t\t\t\t\tw.setTimeout(function(){ makeRequests(); },0);\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t//loop stylesheets, send text content to translate\r\n\t\tripCSS = function(){\r\n\r\n\t\t\tfor( var i = 0; i < links.length; i++ ){\r\n\t\t\t\tvar sheet = links[ i ],\r\n\t\t\t\thref = sheet.href,\r\n\t\t\t\tmedia = sheet.media,\r\n\t\t\t\tisCSS = sheet.rel && sheet.rel.toLowerCase() === \"stylesheet\";\r\n\r\n\t\t\t\t//only links plz and prevent re-parsing\r\n\t\t\t\tif( !!href && isCSS && !parsedSheets[ href ] ){\r\n\t\t\t\t\t// selectivizr exposes css through the rawCssText expando\r\n\t\t\t\t\tif (sheet.styleSheet && sheet.styleSheet.rawCssText) {\r\n\t\t\t\t\t\ttranslate( sheet.styleSheet.rawCssText, href, media );\r\n\t\t\t\t\t\tparsedSheets[ href ] = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif( (!/^([a-zA-Z:]*\\/\\/)/.test( href ) && !base) ||\r\n\t\t\t\t\t\t\thref.replace( RegExp.$1, \"\" ).split( \"/\" )[0] === w.location.host ){\r\n\t\t\t\t\t\t\t// IE7 doesn't handle urls that start with '//' for ajax request\r\n\t\t\t\t\t\t\t// manually add in the protocol\r\n\t\t\t\t\t\t\tif ( href.substring(0,2) === \"//\" ) { href = w.location.protocol + href; }\r\n\t\t\t\t\t\t\trequestQueue.push( {\r\n\t\t\t\t\t\t\t\thref: href,\r\n\t\t\t\t\t\t\t\tmedia: media\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmakeRequests();\r\n\t\t};\r\n\r\n\t//translate CSS\r\n\tripCSS();\r\n\r\n\t//expose update for re-running respond later on\r\n\trespond.update = ripCSS;\r\n\r\n\t//expose getEmValue\r\n\trespond.getEmValue = getEmValue;\r\n\r\n\t//adjust on resize\r\n\tfunction callMedia(){\r\n\t\tapplyMedia( true );\r\n\t}\r\n\r\n\tif( w.addEventListener ){\r\n\t\tw.addEventListener( \"resize\", callMedia, false );\r\n\t}\r\n\telse if( w.attachEvent ){\r\n\t\tw.attachEvent( \"onresize\", callMedia );\r\n\t}\r\n})(this);\r\n"}